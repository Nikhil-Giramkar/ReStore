using API.Data;
using API.DTOs;
using API.Entities;
using API.Extensions;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
namespace API.Controllers
{

    public class BasketController : BaseApiController
    {
        private readonly StoreContext _context;

        //We did not pluralise the name of controller, as each user will fetch only one basket.

        public BasketController(StoreContext context)
        {
            _context = context;
        }

        [HttpGet(Name = "GetBasket")]
        public async Task<ActionResult<BasketDTO>> GetBasket()
        {
            Basket basket = await RetrieveBasket(GetBuyerId());
            if (basket == null)
                return NotFound();

            return basket.MapBasketToBasketDTO();
        }

        [HttpPost]
        public async Task<ActionResult<BasketDTO>> AddItemToBasket(int productId, int quantity)
        {
            //get basket
            var basket = await RetrieveBasket(GetBuyerId());
            if (basket == null)
            {
                //Create basket, if no basket already
                basket = CreateBasket();
            }

            //get product
            var product = await _context.Products.FindAsync(productId);
            if (product == null)
                return BadRequest(new ProblemDetails { Title = "Product Not Found" });

            //add item
            basket.AddItem(product, quantity);
            //EF will keep track of added product in basket 

            //save changes
            var result = await _context.SaveChangesAsync() > 0;

            if (result)
                return CreatedAtRoute("GetBasket", basket.MapBasketToBasketDTO());
            //Here, we will now return the BasketDTO as response
            //GetBasket will ocation headers correctly, specifying where to get this returned resource from

            return BadRequest(new ProblemDetails
            {
                Title = "Problem in saving product to basket"
            });

        }

        [HttpDelete]
        public async Task<ActionResult> RemoveBasketItem(int productId, int quantity)
        {
            //Get Basket
            var basket = await RetrieveBasket(GetBuyerId());

            if (basket == null) return NotFound();

            //Remove item or reduce quantity
            basket.RemoveItem(productId, quantity);

            //Save Cahnges
            var result = await _context.SaveChangesAsync() > 0;

            if (result)
                return Ok();
            return BadRequest(new ProblemDetails { Title = "Problem in removing item from Basket" });
        }

        private async Task<Basket> RetrieveBasket(string buyerId)
        {
            if (string.IsNullOrEmpty(buyerId))
            {
                //if buyerId or user's name is not found, no basket can be retrieved
                //Delete the cookie if it exists and return null
                Response.Cookies.Delete("buyerId");
                return null;
            }

            var basket = await _context.Baskets
                        .Include(i => i.Items) //This is needed to include the basket items
                        .ThenInclude(p => p.Product) //Basket Item has relation with products, so need to include products as well
                        .FirstOrDefaultAsync(x => x.BuyerId == buyerId); //We will fetc the buyerId from User's cookie stored in his browser.
            return basket;
        }

        private string GetBuyerId()
        {
            //BuyerId can be either logged in user's name, or cookie of anonymous user (before logging in)
            return User.Identity?.Name ?? Request.Cookies["buyerId"];
        }

        private Basket CreateBasket()
        {
            var buyerId = User.Identity?.Name; //if user logged in already, buyerId = user's name

            if (string.IsNullOrEmpty(buyerId)) //If not logged in, create an anonymous basket
            {
                //To create a basket, we will generate a buyerId for the user
                buyerId = Guid.NewGuid().ToString();
                //there is europian policy, which allow a user to either accept or decline a cookie.
                //But for our app to function properly, w need this cookie,
                //So we  will mark it as Essential :  true
                var cookieOptions = new CookieOptions
                {
                    IsEssential = true,
                    Expires = DateTime.Now.AddDays(30) //expiry of 30 days
                };

                Response.Cookies.Append("buyerId", buyerId, cookieOptions);
                //Send abuyerId to the user as response, to store in cookie
                //So we can uniquely identify this user for net 30days.
            }


            var basket = new Basket
            {
                BuyerId = buyerId,
                //Basket's Id will be autogenerated by EF
                //List of BasketItems already initialized
            };

            //Tell DB about new basket created
            _context.Baskets.Add(basket);

            return basket;
        }
    }
}