Tech Stack for the E-Commerce Store built...
1. .Net Core Web API
2. React JS
3. Redux
---------------------------------------------------------------------------------------------------------------------------------------------

.NET Ecosystem

We generally use C# lang. which is converted to CLR using C# Runtime.
We will also use libaries and packeges (Nuget)
dotnet CLI to run and manage app.

What's a Web API ?
- HTTP based services on top of .NET
- Can be consumed by:
    - Browsers
    - Mobile Apps
    - IOT, etc.
- REST
    REST is a pattern for creating HTTP services.
    Its a set of protocol.
   Rules of REST are as follows:
    - It works on Client-Server architecture.
    - The communication must be stateless. Each request must be treated seperately and not return the cached response given of other client.
    - The response can be cacheable if server allows so that it can be used later by browser in re-rendering UI.
    - The interface for request and response should be uniform. It should not happen that one API is handled over HTTP and other is handled over some other protocol.

---------------------------------------------------------------------------------------------------------------------------------------------

Creating a .NET solution and API project

Go to cmd, direct to your folder
dotnet --info :  tells the latest version of .NET o our machine.
dotnet -h: gives list of commands (help)
dotnet new list : this command gives list of .NET projects we can create with current SDK
dotnet new sln : The template "Solution File" was created successfully.
dotnet new webapi -o API : creates a new We API project where its output folder is named "API"
dotnet sln add API : Project `API\API.csproj` added to the solution.
code . :This will open the ReStore folder in VS Code.
cd API: go to API folder.
dotnet run : runs the application on a port. http://localhost:5147/swagger/index.html

---------------------------------------------------------------------------------------------------------------------------------------------
VS Code Extensions needed for Dev

C#
C# Extensions
Nuget Gallery
Sqlite
Auto Rename Tag
After this, do >Reload Window from search bar above in VS Code,
Click yes to a pop-up which will give a .vscode folder
Then, turn "Auto Save" ON in "File" tab

---------------------------------------------------------------------------------------------------------------------------------------------

Adding Project to Github

Go to Source Control Icon on VS Code on left navigation
Click "Initialize Repository"
We'll see many files there
Go to terminal, type:
    dotnet new gitignore
This will ignore all .bin, .obj, ,vscode files etc which are not necessary.
Now, the number files to be uploaded will be reduced.

Also add appsettings.json to .gitignore by right clicking on it.
So that we will avoid publishing this to GitHub, in case we have any secret keys stored inside it.

---------------------------------------------------------------------------------------------------------------------------------------------

Inside Web API template.

Program.cs 
-----------
we can see that our app is built using WebApplication.CreateBuilder(args);
Our application runs on Kestrel web server.
The congiruations in Program.cs helps Kestrel in setting up the app.

We add dependamcy Injection in it.
Some services like controllers, Swagger are already registered in it.
We aso congure middlewares in it.

API.csproj
-------------
This tells the .NET target framework

Make the <nullable> as diabled,
otherwise we see errors while developing app. 
If it is enabled, it makes the "?" required for strings, throwing errors if not done so.
So disable it.

<ImplicitUsings>enable</ImplicitUsings>
This helps us to use certain buil-in libraries without sepcifyin them explicitly.
Use can see them in ~\Restore\API\obj\Debug\net7.0\API.GlobalUsings.g.cs

appSettings.json
-----------------
Update below:
"Microsoft.AspNetCore": "Information"
So that we get maximum information about endpoints we hit, info we received, etc.

---------------------------------------------------------------------------------------------------------------------------------------------

Entity Framework
-------------------
What is ? 

    In old days, when we had to do mapping between our entities/model and DB tables,
    Lets say, retrieve a list of products from Database,
    We need to:
        Open a connection to DB
        execute a command
        read data back from DB
        map data from DB to our entities/model
        remember to close the connection afterwards.

    With Entity Framework, 
        we do not need to do this anymore,
        Its job is to take our C# entity objects (Product obj. in our case)
        And it writes the SQL command for what we want to achieve ased on the code we write.
        So, we conitune to write our code in C#, we don't need to wite SQL Queries.
        EF is an Object Relational Mapper (ORM), which means it works with Relational Data and Relational DBs (SqlServer, Posgres, Oracle, SqlLite, etc).
    
    DbContext
    ----------
    We get a DbContext class from Entity framework.
    This provides us a gateway to our database or provides a session to our database.
    It's responsible for opening and managing connections to DB.

    DbSets
    -------
    DbContext can have one or more DbSets.
    These DbSets correspond to tables in our DB
    We use LINQ to query our data in methods inside DbSets

                LINQ                                    SQL
        -----------------------------> DbSets -----------------------> DB
        var products =                          select * from
            context.products.ToList()                   products


Features
--------
Modelling
    EF works with our objects, referred as Plain Old Class Objects (POCOs)
    That has get set properties and diff. data types 
Querying
    EF allows us to use LINQ queries.
Change Tracking
    EF tracks if anything is changed in DB
Saving
    It allows Saving our data in DB
Concurrency
    It will optimistically try and make changes in DB and if something goes wrong, it will be rolbacked.
Transactions
    Provides transaction management, we can build up a list of changes to be done in DB and all of that will go as a single transaction.
Caching
    For fast retrievals
Migrations
    Building DB and tables by looking st our code.

Configurations,
Built-in Conventions are also its features.
---------------------------------------------------------------------------------------------------------------------------------------------





